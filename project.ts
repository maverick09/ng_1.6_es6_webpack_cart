# Complete Codebase - React 19 + Vite + Module Federation + MSW + Nx

## Project Structure
```
my-micro-frontend/
├── apps/
│   ├── shell/
│   │   ├── public/
│   │   │   └── mockServiceWorker.js          # Generated by MSW
│   │   ├── src/
│   │   │   ├── mocks/
│   │   │   │   ├── browser.ts
│   │   │   │   └── handlers.ts
│   │   │   ├── App.tsx
│   │   │   ├── App.css
│   │   │   ├── main.tsx
│   │   │   ├── index.css
│   │   │   └── remote-types.d.ts
│   │   ├── index.html
│   │   ├── vite.config.ts
│   │   ├── project.json
│   │   ├── tsconfig.json
│   │   └── package.json
│   │
│   └── remote-app/
│       ├── src/
│       │   ├── components/
│       │   │   ├── ProductList.tsx
│       │   │   ├── ProductList.css
│       │   │   ├── Dashboard.tsx
│       │   │   └── Dashboard.css
│       │   ├── mocks/
│       │   │   └── mockApi.ts
│       │   ├── App.tsx
│       │   ├── App.css
│       │   ├── main.tsx
│       │   └── index.css
│       ├── index.html
│       ├── vite.config.ts
│       ├── project.json
│       ├── tsconfig.json
│       └── package.json
│
├── nx.json
├── package.json
├── tsconfig.base.json
└── README.md
```

---

## Root Level Files

### `package.json`
```json
{
  "name": "my-micro-frontend",
  "version": "1.0.0",
  "license": "MIT",
  "scripts": {
    "dev:shell": "nx run shell:dev",
    "dev:remote": "nx run remote-app:dev",
    "dev:all": "nx run-many --target=dev --projects=shell,remote-app --parallel",
    "build:shell": "nx run shell:build",
    "build:remote": "nx run remote-app:build",
    "build:all": "nx run-many --target=build --projects=shell,remote-app",
    "preview:shell": "nx run shell:preview",
    "preview:remote": "nx run remote-app:preview",
    "lint": "nx run-many --target=lint --all",
    "test": "nx run-many --target=test --all"
  },
  "dependencies": {
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@nx/vite": "^20.0.0",
    "@nx/workspace": "^20.0.0",
    "@originjs/vite-plugin-federation": "^1.3.5",
    "@types/node": "^20.0.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@vitejs/plugin-react": "^4.3.0",
    "msw": "^2.4.0",
    "nx": "^20.0.0",
    "typescript": "^5.6.0",
    "vite": "^5.4.0"
  }
}
```

### `nx.json`
```json
{
  "$schema": "./node_modules/nx/schemas/nx-schema.json",
  "npmScope": "my-micro-frontend",
  "affected": {
    "defaultBase": "main"
  },
  "tasksRunnerOptions": {
    "default": {
      "runner": "nx/tasks-runners/default",
      "options": {
        "cacheableOperations": ["build", "lint", "test"]
      }
    }
  },
  "targetDefaults": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": ["{projectRoot}/dist"]
    },
    "dev": {
      "dependsOn": []
    }
  },
  "namedInputs": {
    "default": ["{projectRoot}/**/*", "sharedGlobals"],
    "production": [
      "default",
      "!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)",
      "!{projectRoot}/tsconfig.spec.json"
    ],
    "sharedGlobals": []
  },
  "generators": {
    "@nx/react": {
      "application": {
        "babel": true
      }
    }
  }
}
```

### `tsconfig.base.json`
```json
{
  "compileOnSave": false,
  "compilerOptions": {
    "rootDir": ".",
    "sourceMap": true,
    "declaration": false,
    "moduleResolution": "node",
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "importHelpers": true,
    "target": "ES2022",
    "module": "ESNext",
    "lib": ["ES2022", "DOM"],
    "skipLibCheck": true,
    "skipDefaultLibCheck": true,
    "baseUrl": ".",
    "jsx": "react-jsx",
    "paths": {
      "@my-micro-frontend/shared": ["libs/shared/src/index.ts"]
    }
  },
  "exclude": ["node_modules", "tmp"]
}
```

---

## Shell Application

### `apps/shell/vite.config.ts`
```typescript
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import federation from '@originjs/vite-plugin-federation';

export default defineConfig({
  plugins: [
    react(),
    federation({
      name: 'shell',
      remotes: {
        'remote-app': 'http://localhost:3001/assets/remoteEntry.js',
      },
      shared: {
        react: {
          singleton: true,
          requiredVersion: '^19.0.0',
        },
        'react-dom': {
          singleton: true,
          requiredVersion: '^19.0.0',
        },
      },
    }),
  ],
  server: {
    port: 3000,
    cors: true,
  },
  build: {
    target: 'esnext',
    minify: false,
    cssCodeSplit: false,
  },
});
```

### `apps/shell/project.json`
```json
{
  "name": "shell",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "apps/shell/src",
  "projectType": "application",
  "targets": {
    "dev": {
      "executor": "@nx/vite:dev-server",
      "options": {
        "buildTarget": "shell:build",
        "port": 3000
      }
    },
    "build": {
      "executor": "@nx/vite:build",
      "outputs": ["{options.outputPath}"],
      "options": {
        "outputPath": "dist/apps/shell",
        "configFile": "apps/shell/vite.config.ts"
      }
    },
    "preview": {
      "executor": "@nx/vite:preview-server",
      "options": {
        "buildTarget": "shell:build",
        "port": 3000
      }
    },
    "lint": {
      "executor": "@nx/eslint:lint"
    },
    "test": {
      "executor": "@nx/vite:test"
    }
  },
  "tags": ["type:app", "scope:shell"]
}
```

### `apps/shell/tsconfig.json`
```json
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "jsx": "react-jsx",
    "allowJs": false,
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true
  },
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    }
  ]
}
```

### `apps/shell/index.html`
```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Shell Application</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
```

### `apps/shell/src/remote-types.d.ts`
```typescript
declare module 'remote-app/ProductList' {
  const ProductList: React.ComponentType;
  export default ProductList;
}

declare module 'remote-app/Dashboard' {
  const Dashboard: React.ComponentType;
  export default Dashboard;
}
```

### `apps/shell/src/main.tsx`
```typescript
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

async function enableMocking() {
  if (process.env.NODE_ENV !== 'development') {
    return;
  }

  const { worker } = await import('./mocks/browser');

  // `worker.start()` returns a Promise that resolves
  // once the Service Worker is up and ready to intercept requests.
  return worker.start({
    onUnhandledRequest: 'bypass',
  });
}

enableMocking().then(() => {
  ReactDOM.createRoot(document.getElementById('root')!).render(
    <React.StrictMode>
      <App />
    </React.StrictMode>
  );
});
```

### `apps/shell/src/App.tsx`
```typescript
import React, { Suspense, lazy, useState } from 'react';
import './App.css';

// Lazy load remote components
const ProductList = lazy(() => import('remote-app/ProductList'));
const Dashboard = lazy(() => import('remote-app/Dashboard'));

type View = 'dashboard' | 'products';

function App() {
  const [currentView, setCurrentView] = useState<View>('dashboard');
  const [user, setUser] = useState<any>(null);

  const handleLogin = async () => {
    try {
      const response = await fetch('/api/shell/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: 'john@example.com',
          password: 'password123',
        }),
      });
      const data = await response.json();
      setUser(data.user);
    } catch (error) {
      console.error('Login failed:', error);
    }
  };

  const handleLogout = async () => {
    try {
      await fetch('/api/shell/auth/logout', { method: 'POST' });
      setUser(null);
    } catch (error) {
      console.error('Logout failed:', error);
    }
  };

  return (
    <div className="app">
      <header className="app-header">
        <h1>🏢 Shell Application</h1>
        <nav className="app-nav">
          <button
            onClick={() => setCurrentView('dashboard')}
            className={currentView === 'dashboard' ? 'active' : ''}
          >
            Dashboard
          </button>
          <button
            onClick={() => setCurrentView('products')}
            className={currentView === 'products' ? 'active' : ''}
          >
            Products
          </button>
          {user ? (
            <div className="user-info">
              <span>Welcome, {user.name}</span>
              <button onClick={handleLogout}>Logout</button>
            </div>
          ) : (
            <button onClick={handleLogin}>Login</button>
          )}
        </nav>
      </header>

      <main className="app-main">
        <Suspense fallback={<div className="loading">Loading module...</div>}>
          {currentView === 'dashboard' && <Dashboard />}
          {currentView === 'products' && <ProductList />}
        </Suspense>
      </main>

      <footer className="app-footer">
        <p>Shell App - Module Federation with MSW</p>
      </footer>
    </div>
  );
}

export default App;
```

### `apps/shell/src/App.css`
```css
.app {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.app-header {
  background: rgba(255, 255, 255, 0.95);
  padding: 1rem 2rem;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.app-header h1 {
  margin: 0;
  color: #667eea;
  font-size: 1.8rem;
}

.app-nav {
  display: flex;
  gap: 1rem;
  align-items: center;
}

.app-nav button {
  padding: 0.5rem 1.5rem;
  border: none;
  background: #667eea;
  color: white;
  border-radius: 5px;
  cursor: pointer;
  font-size: 1rem;
  transition: all 0.3s ease;
}

.app-nav button:hover {
  background: #5568d3;
  transform: translateY(-2px);
}

.app-nav button.active {
  background: #764ba2;
}

.user-info {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 0.5rem 1rem;
  background: #f0f0f0;
  border-radius: 5px;
}

.user-info span {
  font-weight: 500;
}

.app-main {
  flex: 1;
  padding: 2rem;
  overflow-y: auto;
}

.loading {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 400px;
  font-size: 1.5rem;
  color: white;
}

.app-footer {
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 1rem;
  text-align: center;
}

.app-footer p {
  margin: 0;
}
```

### `apps/shell/src/index.css`
```css
* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

#root {
  min-height: 100vh;
}
```

### `apps/shell/src/mocks/browser.ts`
```typescript
import { setupWorker } from 'msw/browser';
import { shellHandlers } from './handlers';

export const worker = setupWorker(...shellHandlers);
```

### `apps/shell/src/mocks/handlers.ts`
```typescript
import { http, HttpResponse, delay } from 'msw';

// Mock data
const mockUser = {
  id: '1',
  name: 'John Doe',
  email: 'john@example.com',
  role: 'admin',
};

const mockNavigationItems = [
  { id: '1', label: 'Dashboard', path: '/dashboard', icon: 'dashboard' },
  { id: '2', label: 'Products', path: '/products', icon: 'inventory' },
  { id: '3', label: 'Orders', path: '/orders', icon: 'shopping_cart' },
  { id: '4', label: 'Settings', path: '/settings', icon: 'settings' },
];

export const shellHandlers = [
  // User authentication
  http.post('/api/shell/auth/login', async ({ request }) => {
    await delay(500);
    const { email, password } = await request.json() as any;
    
    if (email && password) {
      return HttpResponse.json({
        user: mockUser,
        token: 'mock-jwt-token-12345',
      });
    }
    
    return HttpResponse.json(
      { error: 'Invalid credentials' },
      { status: 401 }
    );
  }),

  // Get current user
  http.get('/api/shell/auth/user', async () => {
    await delay(300);
    return HttpResponse.json(mockUser);
  }),

  // Logout
  http.post('/api/shell/auth/logout', async () => {
    await delay(200);
    return HttpResponse.json({ success: true });
  }),

  // Navigation items
  http.get('/api/shell/navigation', async () => {
    await delay(200);
    return HttpResponse.json(mockNavigationItems);
  }),

  // Global settings
  http.get('/api/shell/settings', async () => {
    await delay(300);
    return HttpResponse.json({
      theme: 'light',
      language: 'en',
      notifications: true,
    });
  }),

  // Update settings
  http.put('/api/shell/settings', async ({ request }) => {
    await delay(400);
    const settings = await request.json();
    return HttpResponse.json(settings);
  }),
];
```

---

## Remote Application

### `apps/remote-app/vite.config.ts`
```typescript
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import federation from '@originjs/vite-plugin-federation';

export default defineConfig({
  plugins: [
    react(),
    federation({
      name: 'remote-app',
      filename: 'remoteEntry.js',
      exposes: {
        './ProductList': './src/components/ProductList.tsx',
        './Dashboard': './src/components/Dashboard.tsx',
      },
      shared: {
        react: {
          singleton: true,
          requiredVersion: '^19.0.0',
        },
        'react-dom': {
          singleton: true,
          requiredVersion: '^19.0.0',
        },
      },
    }),
  ],
  server: {
    port: 3001,
    cors: true,
  },
  build: {
    target: 'esnext',
    minify: false,
    cssCodeSplit: false,
  },
  preview: {
    port: 3001,
  },
});
```

### `apps/remote-app/project.json`
```json
{
  "name": "remote-app",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "apps/remote-app/src",
  "projectType": "application",
  "targets": {
    "dev": {
      "executor": "@nx/vite:dev-server",
      "options": {
        "buildTarget": "remote-app:build",
        "port": 3001
      }
    },
    "build": {
      "executor": "@nx/vite:build",
      "outputs": ["{options.outputPath}"],
      "options": {
        "outputPath": "dist/apps/remote-app",
        "configFile": "apps/remote-app/vite.config.ts"
      }
    },
    "preview": {
      "executor": "@nx/vite:preview-server",
      "options": {
        "buildTarget": "remote-app:build",
        "port": 3001
      }
    },
    "lint": {
      "executor": "@nx/eslint:lint"
    },
    "test": {
      "executor": "@nx/vite:test"
    }
  },
  "tags": ["type:app", "scope:remote"]
}
```

### `apps/remote-app/tsconfig.json`
```json
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "jsx": "react-jsx",
    "allowJs": false,
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true
  },
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    }
  ]
}
```

### `apps/remote-app/index.html`
```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Remote Application</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
```

### `apps/remote-app/src/main.tsx`
```typescript
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

// No MSW needed for remote app - using pure JS mock API!
ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
```

### `apps/remote-app/src/App.tsx`
```typescript
import React, { useState } from 'react';
import ProductList from './components/ProductList';
import Dashboard from './components/Dashboard';
import './App.css';

type View = 'dashboard' | 'products';

function App() {
  const [currentView, setCurrentView] = useState<View>('products');

  return (
    <div className="remote-app">
      <header className="remote-header">
        <h1>🎯 Remote Application</h1>
        <nav className="remote-nav">
          <button
            onClick={() => setCurrentView('dashboard')}
            className={currentView === 'dashboard' ? 'active' : ''}
          >
            Dashboard
          </button>
          <button
            onClick={() => setCurrentView('products')}
            className={currentView === 'products' ? 'active' : ''}
          >
            Products
          </button>
        </nav>
      </header>

      <main className="remote-main">
        {currentView === 'dashboard' && <Dashboard />}
        {currentView === 'products' && <ProductList />}
      </main>

      <footer className="remote-footer">
        <p>Remote App - Standalone Mode (No MSW needed - Pure JS Mock API)</p>
      </footer>
    </div>
  );
}

export default App;
```

### `apps/remote-app/src/App.css`
```css
.remote-app {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
}

.remote-header {
  background: rgba(255, 255, 255, 0.95);
  padding: 1rem 2rem;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.remote-header h1 {
  margin: 0;
  color: #f5576c;
  font-size: 1.8rem;
}

.remote-nav {
  display: flex;
  gap: 1rem;
}

.remote-nav button {
  padding: 0.5rem 1.5rem;
  border: none;
  background: #f5576c;
  color: white;
  border-radius: 5px;
  cursor: pointer;
  font-size: 1rem;
  transition: all 0.3s ease;
}

.remote-nav button:hover {
  background: #e04858;
  transform: translateY(-2px);
}

.remote-nav button.active {
  background: #f093fb;
}

.remote-main {
  flex: 1;
  padding: 2rem;
  overflow-y: auto;
}

.remote-footer {
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 1rem;
  text-align: center;
}

.remote-footer p {
  margin: 0;
}
```

### `apps/remote-app/src/index.css`
```css
* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

#root {
  min-height: 100vh;
}
```

### `apps/remote-app/src/mocks/mockApi.ts`
```typescript
// Pure JavaScript mock API - no MSW service worker needed!
// This approach works perfectly in module federation scenarios

// Global mock state (shared across all remote components)
const globalMockState = {
  requestCount: 0,
  cartItems: [] as Array<{ productId: string; quantity: number }>,
  authToken: null as string | null,
};

// Mock data
const mockData = {
  products: [
    {
      id: '1',
      name: 'Wireless Headphones',
      description: 'High-quality noise-canceling headphones',
      price: 299.99,
      category: 'electronics',
      inStock: true,
      image: '🎧',
      tags: ['audio', 'wireless', 'premium'],
    },
    {
      id: '2',
      name: 'Smart Watch',
      description: 'Fitness tracking and notifications',
      price: 399.99,
      category: 'electronics',
      inStock: true,
      image: '⌚',
      tags: ['wearable', 'fitness', 'smart'],
    },
    {
      id: '3',
      name: 'Laptop Stand',
      description: 'Ergonomic aluminum laptop stand',
      price: 49.99,
      category: 'accessories',
      inStock: true,
      image: '💻',
      tags: ['ergonomic', 'desk', 'aluminum'],
    },
    {
      id: '4',
      name: 'Mechanical Keyboard',
      description: 'RGB mechanical gaming keyboard',
      price: 149.99,
      category: 'electronics',
      inStock: false,
      image: '⌨️',
      tags: ['gaming', 'rgb', 'mechanical'],
    },
    {
      id: '5',
      name: 'Mouse Pad',
      description: 'Extra large gaming mouse pad',
      price: 24.99,
      category: 'accessories',
      inStock: true,
      image: '🖱️',
      tags: ['gaming', 'desk', 'large'],
    },
    {
      id: '6',
      name: 'USB-C Hub',
      description: '7-in-1 USB-C multiport adapter',
      price: 79.99,
      category: 'accessories',
      inStock: true,
      image: '🔌',
      tags: ['usb-c', 'adapter', 'connectivity'],
    },
  ],
  dashboardData: {
    stats: {
      totalOrders: 1247,
      totalRevenue: 52340.75,
      activeUsers: 892,
      pendingShipments: 43,
    },
    recentOrders: [
      { id: 'ORD-001', customer: 'Alice Johnson', amount: 299.99, status: 'shipped' },
      { id: 'ORD-002', customer: 'Bob Smith', amount: 149.99, status: 'processing' },
      { id: 'ORD-003', customer: 'Carol White', amount: 399.99, status: 'delivered' },
    ],
    salesData: [
      { month: 'Jan', sales: 4200 },
      { month: 'Feb', sales: 3800 },
      { month: 'Mar', sales: 5100 },
      { month: 'Apr', sales: 4600 },
      { month: 'May', sales: 5500 },
      { month: 'Jun', sales: 6200 },
    ],
  },
};

// Configuration for simulated delays and behavior
let currentConfig = {
  enableDelays: true,
  minDelay: 100,
  maxDelay: 500,
};

// Utility functions
const simulateNetworkDelay = (config: typeof currentConfig) => {
  if (!config.enableDelays) return Promise.resolve();
  const delay = Math.random() * (config.maxDelay - config.minDelay) + config.minDelay;
  return new Promise(resolve => setTimeout(resolve, delay));
};

const addRandomVariation = (value: number, variationPercent: number) => {
  const variation = value * variationPercent * (Math.random() - 0.5) * 2;
  return Math.round((value + variation) * 100) / 100;
};

const logMockRequest = (method: string, endpoint: string, data?: any) => {
  console.log(`[Mock API] ${method} ${endpoint}`, data || '');
};

// The Mock API (replaces MSW handlers completely)
export const mockApi = {
  // Configuration methods
  configure: (config: Partial<typeof currentConfig>) => {
    currentConfig = { ...currentConfig, ...config };
    console.log('[Mock API] Configuration updated:', currentConfig);
  },

  getConfig: () => ({
    ...currentConfig,
    stats: {
      requests: globalMockState.requestCount,
      cartItems: globalMockState.cartItems.length,
      authenticated: !!globalMockState.authToken,
      noMSW: true,
    },
    ports: { shell: 8080, remote: 9000 },
  }),

  getProducts: async (filters: any = {}) => {
    await simulateNetworkDelay(currentConfig);
    globalMockState.requestCount++;
    
    const { category, search, inStockOnly } = filters;
    
    let products = [...mockData.products];
    
    // Pure JavaScript filtering - no MSW needed
    if (category && category !== 'all') {
      products = products.filter(p => p.category === category);
    }
    
    if (search) {
      const searchLower = search.toLowerCase();
      products = products.filter(p => 
        p.name.toLowerCase().includes(searchLower) ||
        p.description.toLowerCase().includes(searchLower) ||
        p.tags.some((tag: string) => tag.toLowerCase().includes(searchLower))
      );
    }
    
    if (inStockOnly) {
      products = products.filter(p => p.inStock);
    }
    
    logMockRequest('GET', '/api/remote/products', { 
      filters, 
      resultCount: products.length,
      mockType: 'Pure Functions'
    });
    
    return products;
  },

  getDashboard: async () => {
    await simulateNetworkDelay(currentConfig);
    globalMockState.requestCount++;
    
    const dashboard = {
      ...mockData.dashboardData,
      stats: {
        ...mockData.dashboardData.stats,
        totalRevenue: addRandomVariation(mockData.dashboardData.stats.totalRevenue, 0.02),
      },
      contextInfo: {
        requestsHandled: globalMockState.requestCount,
        sharedCartItems: globalMockState.cartItems.length,
        authenticated: !!globalMockState.authToken,
        pattern: 'Pure Function-Based Context (No MSW)',
      },
    };
    
    logMockRequest('GET', '/api/remote/dashboard', 'Dashboard via pure functions');
    
    return dashboard;
  },

  // SHARED CART STATE - Pure JavaScript, no MSW!
  getCart: async () => {
    await simulateNetworkDelay(currentConfig);
    globalMockState.requestCount++;
    
    // Pure JavaScript cart calculation
    const cartWithProducts = globalMockState.cartItems.map(item => {
      const product = mockData.products.find(p => p.id === item.productId);
      return {
        ...item,
        product,
        subtotal: product ? product.price * item.quantity : 0,
      };
    });
    
    const total = cartWithProducts.reduce((sum, item) => sum + item.subtotal, 0);
    
    logMockRequest('GET', '/api/cart', { 
      items: globalMockState.cartItems.length,
      total: total.toFixed(2)
    });
    
    return {
      items: cartWithProducts,
      total,
    };
  },

  addToCart: async (productId: string, quantity: number = 1) => {
    await simulateNetworkDelay(currentConfig);
    globalMockState.requestCount++;
    
    const existingItem = globalMockState.cartItems.find(item => item.productId === productId);
    
    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      globalMockState.cartItems.push({ productId, quantity });
    }
    
    logMockRequest('POST', '/api/cart/add', { productId, quantity });
    
    return mockApi.getCart();
  },

  updateCartItem: async (productId: string, quantity: number) => {
    await simulateNetworkDelay(currentConfig);
    globalMockState.requestCount++;
    
    const item = globalMockState.cartItems.find(item => item.productId === productId);
    
    if (item) {
      if (quantity <= 0) {
        globalMockState.cartItems = globalMockState.cartItems.filter(i => i.productId !== productId);
      } else {
        item.quantity = quantity;
      }
    }
    
    logMockRequest('PUT', '/api/cart/update', { productId, quantity });
    
    return mockApi.getCart();
  },

  clearCart: async () => {
    await simulateNetworkDelay(currentConfig);
    globalMockState.requestCount++;
    
    globalMockState.cartItems = [];
    
    logMockRequest('DELETE', '/api/cart/clear', 'Cart cleared');
    
    return { items: [], total: 0 };
  },

  // Get statistics about the mock API state
  getStats: () => ({
    requestsHandled: globalMockState.requestCount,
    cartItems: globalMockState.cartItems.length,
    authenticated: !!globalMockState.authToken,
    mockPattern: 'Pure JavaScript Functions (No MSW)',
  }),
};
```

### `apps/remote-app/src/components/ProductList.tsx`
```typescript
import React, { useEffect, useState } from 'react';
import { mockApi } from '../mocks/mockApi';
import './ProductList.css';

interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  category: string;
  inStock: boolean;
  image: string;
  tags: string[];
}

const ProductList: React.FC = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState({
    category: 'all',
    search: '',
    inStockOnly: false,
  });
  const [cart, setCart] = useState<any>(null);

  const loadProducts = async () => {
    setLoading(true);
    try {
      const data = await mockApi.getProducts(filter);
      setProducts(data);
    } catch (error) {
      console.error('Failed to load products:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadCart = async () => {
    try {
      const cartData = await mockApi.getCart();
      setCart(cartData);
    } catch (error) {
      console.error('Failed to load cart:', error);
    }
  };

  const handleAddToCart = async (productId: string) => {
    try {
      const updatedCart = await mockApi.addToCart(productId, 1);
      setCart(updatedCart);
    } catch (error) {
      console.error('Failed to add to cart:', error);
    }
  };

  useEffect(() => {
    loadProducts();
    loadCart();
  }, [filter]);

  if (loading) {
    return <div className="product-list-loading">Loading products...</div>;
  }

  return (
    <div className="product-list-container">
      <div className="product-list-header">
        <h2>🛍️ Product Catalog</h2>
        {cart && (
          <div className="cart-summary">
            🛒 Cart: {cart.items.length} items (${cart.total.toFixed(2)})
          </div>
        )}
      </div>

      <div className="product-filters">
        <div className="filter-group">
          <label>Category:</label>
          <select
            value={filter.category}
            onChange={(e) => setFilter({ ...filter, category: e.target.value })}
          >
            <option value="all">All Categories</option>
            <option value="electronics">Electronics</option>
            <option value="accessories">Accessories</option>
          </select>
        </div>

        <div className="filter-group">
          <label>Search:</label>
          <input
            type="text"
            placeholder="Search products..."
            value={filter.search}
            onChange={(e) => setFilter({ ...filter, search: e.target.value })}
          />
        </div>

        <div className="filter-group">
          <label>
            <input
              type="checkbox"
              checked={filter.inStockOnly}
              onChange={(e) => setFilter({ ...filter, inStockOnly: e.target.checked })}
            />
            In Stock Only
          </label>
        </div>
      </div>

      <div className="product-grid">
        {products.length === 0 ? (
          <div className="no-products">No products found</div>
        ) : (
          products.map((product) => (
            <div key={product.id} className={`product-card ${!product.inStock ? 'out-of-stock' : ''}`}>
              <div className="product-image">{product.image}</div>
              <h3>{product.name}</h3>
              <p className="product-description">{product.description}</p>
              <div className="product-tags">
                {product.tags.map((tag) => (
                  <span key={tag} className="tag">{tag}</span>
                ))}
              </div>
              <div className="product-footer">
                <span className="product-price">${product.price}</span>
                <button
                  onClick={() => handleAddToCart(product.id)}
                  disabled={!product.inStock}
                  className="add-to-cart-btn"
                >
                  {product.inStock ? 'Add to Cart' : 'Out of Stock'}
                </button>
              </div>
            </div>
          ))
        )}
      </div>

      <div className="product-list-footer">
        <p>Remote Module - Products (using Pure JS Mock API)</p>
        <p>Found {products.length} product(s)</p>
      </div>
    </div>
  );
};

export default ProductList;
```

### `apps/remote-app/src/components/ProductList.css`
```css
.product-list-container {
  background: white;
  border-radius: 10px;
  padding: 2rem;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.product-list-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.product-list-header h2 {
  margin: 0;
  color: #333;
  font-size: 2rem;
}

.cart-summary {
  padding: 0.75rem 1.5rem;
  background: #667eea;
  color: white;
  border-radius: 25px;
  font-weight: 500;
}

.product-filters {
  display: flex;
  gap: 1.5rem;
  margin-bottom: 2rem;
  padding: 1.5rem;
  background: #f8f9fa;
  border-radius: 8px;
  flex-wrap: wrap;
}

.filter-group {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.filter-group label {
  font-weight: 500;
  color: #555;
  font-size: 0.9rem;
}

.filter-group select,
.filter-group input[type="text"] {
  padding: 0.5rem;
  border: 1px solid #ddd;
  border-radius: 5px;
  font-size: 1rem;
}

.filter-group input[type="checkbox"] {
  margin-right: 0.5rem;
}

.product-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.product-card {
  background: white;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 1.5rem;
  transition: all 0.3s ease;
}

.product-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
}

.product-card.out-of-stock {
  opacity: 0.6;
}

.product-image {
  font-size: 4rem;
  text-align: center;
  margin-bottom: 1rem;
}

.product-card h3 {
  margin: 0 0 0.5rem 0;
  color: #333;
  font-size: 1.25rem;
}

.product-description {
  color: #666;
  font-size: 0.9rem;
  margin-bottom: 1rem;
  min-height: 40px;
}

.product-tags {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
  margin-bottom: 1rem;
}

.tag {
  background: #e3f2fd;
  color: #1976d2;
  padding: 0.25rem 0.75rem;
  border-radius: 12px;
  font-size: 0.75rem;
  font-weight: 500;
}

.product-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-top: 1rem;
  border-top: 1px solid #e0e0e0;
}

.product-price {
  font-size: 1.5rem;
  font-weight: bold;
  color: #667eea;
}

.add-to-cart-btn {
  padding: 0.5rem 1rem;
  background: #667eea;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.3s ease;
}

.add-to-cart-btn:hover:not(:disabled) {
  background: #5568d3;
  transform: scale(1.05);
}

.add-to-cart-btn:disabled {
  background: #ccc;
  cursor: not-allowed;
}

.no-products {
  text-align: center;
  padding: 3rem;
  color: #999;
  font-size: 1.2rem;
}

.product-list-loading {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 400px;
  font-size: 1.5rem;
  color: #667eea;
}

.product-list-footer {
  text-align: center;
  padding-top: 1.5rem;
  border-top: 2px solid #e0e0e0;
  color: #666;
}

.product-list-footer p {
  margin: 0.25rem 0;
}
```

### `apps/remote-app/src/components/Dashboard.tsx`
```typescript
import React, { useEffect, useState } from 'react';
import { mockApi } from '../mocks/mockApi';
import './Dashboard.css';

interface DashboardData {
  stats: {
    totalOrders: number;
    totalRevenue: number;
    activeUsers: number;
    pendingShipments: number;
  };
  recentOrders: Array<{
    id: string;
    customer: string;
    amount: number;
    status: string;
  }>;
  salesData: Array<{
    month: string;
    sales: number;
  }>;
  contextInfo?: {
    requestsHandled: number;
    sharedCartItems: number;
    authenticated: boolean;
    pattern: string;
  };
}

const Dashboard: React.FC = () => {
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);
  const [loading, setLoading] = useState(true);

  const loadDashboard = async () => {
    setLoading(true);
    try {
      const data = await mockApi.getDashboard();
      setDashboardData(data);
    } catch (error) {
      console.error('Failed to load dashboard:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadDashboard();
    
    // Auto-refresh every 10 seconds
    const interval = setInterval(loadDashboard, 10000);
    return () => clearInterval(interval);
  }, []);

  if (loading || !dashboardData) {
    return <div className="dashboard-loading">Loading dashboard...</div>;
  }

  const { stats, recentOrders, salesData, contextInfo } = dashboardData;

  return (
    <div className="dashboard-container">
      <div className="dashboard-header">
        <h2>📊 Analytics Dashboard</h2>
        <button onClick={loadDashboard} className="refresh-btn">
          🔄 Refresh
        </button>
      </div>

      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon">📦</div>
          <div className="stat-content">
            <h3>{stats.totalOrders.toLocaleString()}</h3>
            <p>Total Orders</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">💰</div>
          <div className="stat-content">
            <h3>${stats.totalRevenue.toLocaleString()}</h3>
            <p>Total Revenue</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">👥</div>
          <div className="stat-content">
            <h3>{stats.activeUsers.toLocaleString()}</h3>
            <p>Active Users</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">🚚</div>
          <div className="stat-content">
            <h3>{stats.pendingShipments}</h3>
            <p>Pending Shipments</p>
          </div>
        </div>
      </div>

      <div className="dashboard-content">
        <div className="recent-orders-section">
          <h3>Recent Orders</h3>
          <div className="orders-table">
            <table>
              <thead>
                <tr>
                  <th>Order ID</th>
                  <th>Customer</th>
                  <th>Amount</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                {recentOrders.map((order) => (
                  <tr key={order.id}>
                    <td>{order.id}</td>
                    <td>{order.customer}</td>
                    <td>${order.amount.toFixed(2)}</td>
                    <td>
                      <span className={`status-badge status-${order.status}`}>
                        {order.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        <div className="sales-chart-section">
          <h3>Sales Trend</h3>
          <div className="simple-bar-chart">
            {salesData.map((data) => (
              <div key={data.month} className="bar-item">
                <div
                  className="bar"
                  style={{ height: `${(data.sales / 7000) * 100}%` }}
                  title={`${data.month}: ${data.sales}`}
                />
                <div className="bar-label">{data.month}</div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {contextInfo && (
        <div className="context-info">
          <h4>Mock API Context Information</h4>
          <div className="context-grid">
            <div className="context-item">
              <strong>Pattern:</strong> {contextInfo.pattern}
            </div>
            <div className="context-item">
              <strong>Requests Handled:</strong> {contextInfo.requestsHandled}
            </div>
            <div className="context-item">
              <strong>Shared Cart Items:</strong> {contextInfo.sharedCartItems}
            </div>
            <div className="context-item">
              <strong>Authenticated:</strong> {contextInfo.authenticated ? 'Yes' : 'No'}
            </div>
          </div>
        </div>
      )}

      <div className="dashboard-footer">
        <p>Remote Module - Dashboard (using Pure JS Mock API)</p>
      </div>
    </div>
  );
};

export default Dashboard;
```

### `apps/remote-app/src/components/Dashboard.css`
```css
.dashboard-container {
  background: white;
  border-radius: 10px;
  padding: 2rem;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.dashboard-header h2 {
  margin: 0;
  color: #333;
  font-size: 2rem;
}

.refresh-btn {
  padding: 0.5rem 1.5rem;
  background: #667eea;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.3s ease;
}

.refresh-btn:hover {
  background: #5568d3;
  transform: scale(1.05);
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 1.5rem;
  border-radius: 10px;
  display: flex;
  align-items: center;
  gap: 1rem;
  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

.stat-icon {
  font-size: 3rem;
}

.stat-content h3 {
  margin: 0 0 0.25rem 0;
  font-size: 2rem;
}

.stat-content p {
  margin: 0;
  opacity: 0.9;
  font-size: 0.9rem;
}

.dashboard-content {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
  margin-bottom: 2rem;
}

.recent-orders-section,
.sales-chart-section {
  background: #f8f9fa;
  padding: 1.5rem;
  border-radius: 8px;
}

.recent-orders-section h3,
.sales-chart-section h3 {
  margin: 0 0 1rem 0;
  color: #333;
}

.orders-table {
  overflow-x: auto;
}

.orders-table table {
  width: 100%;
  border-collapse: collapse;
}

.orders-table th,
.orders-table td {
  padding: 0.75rem;
  text-align: left;
  border-bottom: 1px solid #e0e0e0;
}

.orders-table th {
  background: #667eea;
  color: white;
  font-weight: 600;
}

.orders-table tr:hover {
  background: #f0f0f0;
}

.status-badge {
  padding: 0.25rem 0.75rem;
  border-radius: 12px;
  font-size: 0.85rem;
  font-weight: 500;
}

.status-shipped {
  background: #e3f2fd;
  color: #1976d2;
}

.status-processing {
  background: #fff3e0;
  color: #f57c00;
}

.status-delivered {
  background: #e8f5e9;
  color: #388e3c;
}

.simple-bar-chart {
  display: flex;
  align-items: flex-end;
  justify-content: space-around;
  height: 200px;
  padding: 1rem 0;
  gap: 0.5rem;
}

.bar-item {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
}

.bar {
  width: 100%;
  background: linear-gradient(to top, #667eea, #764ba2);
  border-radius: 4px 4px 0 0;
  transition: all 0.3s ease;
  cursor: pointer;
}

.bar:hover {
  opacity: 0.8;
  transform: scaleY(1.05);
}

.bar-label {
  font-size: 0.85rem;
  color: #666;
  font-weight: 500;
}

.context-info {
  background: #f0f4ff;
  padding: 1.5rem;
  border-radius: 8px;
  border-left: 4px solid #667eea;
  margin-bottom: 1rem;
}

.context-info h4 {
  margin: 0 0 1rem 0;
  color: #667eea;
}

.context-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
}

.context-item {
  font-size: 0.9rem;
  color: #555;
}

.context-item strong {
  color: #333;
}

.dashboard-loading {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 400px;
  font-size: 1.5rem;
  color: #667eea;
}

.dashboard-footer {
  text-align: center;
  padding-top: 1.5rem;
  border-top: 2px solid #e0e0e0;
  color: #666;
}

.dashboard-footer p {
  margin: 0;
}

@media (max-width: 768px) {
  .dashboard-content {
    grid-template-columns: 1fr;
  }
  
  .stats-grid {
    grid-template-columns: 1fr;
  }
}
```

---

## Setup Instructions

### 1. Initialize Project
```bash
# Create Nx workspace
npx create-nx-workspace@latest my-micro-frontend --preset=react-monorepo --packageManager=npm

cd my-micro-frontend

# Install dependencies
npm install react@19 react-dom@19
npm install vite @vitejs/plugin-react
npm install @originjs/vite-plugin-federation
npm install msw

npm install -D @types/react@^18.2.0 @types/react-dom@^18.2.0
npm install -D typescript @types/node
```

### 2. Initialize MSW (Shell only)
```bash
cd apps/shell
npx msw init public/ --save
cd ../..
```

This creates `apps/shell/public/mockServiceWorker.js`

### 3. Running the Application

```bash
# Run both apps in parallel
npm run dev:all

# Or run individually
npm run dev:shell    # http://localhost:3000
npm run dev:remote   # http://localhost:3001
```

### 4. Build for Production

```bash
# Build all
npm run build:all

# Preview builds
npm run preview:shell
npm run preview:remote
```

---

## Key Architecture Points

### MSW in Shell Only
- Shell uses MSW service worker for auth/navigation mocking
- Intercepts fetch requests at the network level
- Good for shell-level concerns

### Pure JS Mock API in Remote
- Remote app uses direct function calls (no service worker)
- Avoids conflicts in module federation
- Shared state across components via global object
- Simpler, more reliable for federated modules

### Module Federation
- Shell dynamically imports remote components
- Shared React 19 singleton prevents duplication
- Remote components can run standalone or federated

### Shared State Pattern
- Cart state persists across ProductList and Dashboard
- Request count tracked globally
- Demonstrates shared context without Redux/Context API

---

## Testing Checklist

- [ ] Shell loads at http://localhost:3000
- [ ] Remote loads at http://localhost:3001  
- [ ] Click Login in shell - MSW intercepts request
- [ ] Navigate to Products - remote component loads
- [ ] Add products to cart - cart counter updates
- [ ] Navigate to Dashboard - cart count shows in context info
- [ ] Check console for mock API logs
- [ ] Verify no service worker errors in remote app

---

**Complete codebase ready for implementation! 🚀**
